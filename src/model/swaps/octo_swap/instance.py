import time
import json
import random
import asyncio
from decimal import Decimal
from typing import Dict, List, Optional, Union, Tuple
from web3 import AsyncWeb3, Web3
from web3.contract import Contract
from web3.types import TxParams, Wei, ChecksumAddress
from eth_account import Account
from loguru import logger
from primp import AsyncClient

from src.utils.config import Config
from src.utils.constants import EXPLORER_URL, RPC_URL

from .constants import (
    ROUTER_CONTRACT,
    WMON_CONTRACT,
    USDC_CONTRACT,
    USDT_CONTRACT,
    TEST1_CONTRACT,
    TEST2_CONTRACT,
    DAK_CONTRACT,
    ABI,
    AVAILABLE_TOKENS,
)


class OctoSwap:
    def __init__(
        self,
        account_index: int,
        proxy: str,
        private_key: str,
        config: Config,
        session: AsyncClient,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OctoSwap

        Args:
            account_index: –ò–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            proxy: –ü—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            private_key: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            session: HTTP —Å–µ—Å—Å–∏—è
        """
        self.account_index = account_index
        self.proxy = proxy
        self.private_key = private_key
        self.config = config
        self.session = session

        # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        self.account: Account = Account.from_key(private_key=private_key)

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Web3 –∫–ª–∏–µ–Ω—Ç —Å middleware –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.web3 = AsyncWeb3(
            AsyncWeb3.AsyncHTTPProvider(
                RPC_URL,
                request_kwargs={"proxy": (f"http://{proxy}") if proxy else None, "ssl": False},
            )
        )

    async def get_gas_params(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞ –∏–∑ —Å–µ—Ç–∏."""
        latest_block = await self.web3.eth.get_block("latest")
        base_fee = latest_block["baseFeePerGas"]
        max_priority_fee = await self.web3.eth.max_priority_fee

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º maxFeePerGas (–±–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è)
        max_fee = base_fee + max_priority_fee

        return {
            "maxFeePerGas": max_fee,
            "maxPriorityFeePerGas": max_priority_fee,
        }

    async def estimate_gas(self, transaction: dict) -> int:
        """–û—Ü–µ–Ω–∏—Ç—å –≥–∞–∑ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –±—É—Ñ–µ—Ä."""
        try:
            estimated = await self.web3.eth.estimate_gas(transaction)
            # –î–æ–±–∞–≤–ª—è–µ–º 10% –∫ estimated gas –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return int(estimated * 1.1)
        except Exception as e:
            logger.warning(
                f"[{self.account_index}] Error estimating gas: {e}. Using default gas limit"
            )
            raise e

    async def get_token_contract(self, token_address: str) -> Contract:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞

        Args:
            token_address: –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞

        Returns:
            Contract: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        """
        return self.web3.eth.contract(
            address=Web3.to_checksum_address(token_address), abi=ABI["token"]
        )

    async def get_token_balance(self, wallet_address: str, token: Dict) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞

        Args:
            wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            token: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ

        Returns:
            float: –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
        """
        max_retries = 15
        retries = 0
        last_exception = None

        while retries <= max_retries:
            try:
                wallet_address = Web3.to_checksum_address(wallet_address)

                if token["native"]:
                    balance_wei = await self.web3.eth.get_balance(wallet_address)
                    return float(Web3.from_wei(balance_wei, "ether"))
                else:
                    token_contract = await self.get_token_contract(token["address"])
                    balance_wei = await token_contract.functions.balanceOf(
                        wallet_address
                    ).call()
                    return float(balance_wei) / (10 ** token["decimals"])
            except Exception as e:
                retries += 1
                last_exception = e
                await asyncio.sleep(1)

        logger.error(
            f"[{self.account_index}] All {max_retries} retry attempts failed when checking balance. Last error: {last_exception}"
        )
        return 0

    async def check_allowance(
        self, token_address: str, spender_address: str, amount_wei: int
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ allowance –¥–ª—è —Ç–æ–∫–µ–Ω–∞."""
        token_contract = await self.get_token_contract(token_address)
        current_allowance = await token_contract.functions.allowance(
            self.account.address, spender_address
        ).call()
        return current_allowance >= amount_wei

    async def approve_token(self, token: Dict, amount_wei: int) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å approve –¥–ª—è —Ç–æ–∫–µ–Ω–∞

        Args:
            token: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
            amount_wei: –°—É–º–º–∞ –≤ wei –¥–ª—è approve

        Returns:
            Optional[str]: –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ approve –∏–ª–∏ None, –µ—Å–ª–∏ approve –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        """
        if token["native"]:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π allowance
        if await self.check_allowance(token["address"], ROUTER_CONTRACT, amount_wei):
            return None

        logger.info(
            f"[{self.account_index}] üîë [APPROVAL] Approving {token['name']}..."
        )

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è approve (uint256 max)
        max_uint256 = 2**256 - 1

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
        token_contract = await self.get_token_contract(token["address"])

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ approve
        approve_func = token_contract.functions.approve(ROUTER_CONTRACT, max_uint256)

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞
        gas_params = await self.get_gas_params()

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = {
            "from": self.account.address,
            "to": token["address"],
            "data": approve_func._encode_transaction_data(),
            "chainId": 10143,
            "type": 2,
            "nonce": await self.web3.eth.get_transaction_count(
                self.account.address, "latest"
            ),
        }

        # –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
        try:
            estimated_gas = await self.estimate_gas(transaction)
            transaction.update({"gas": estimated_gas, **gas_params})
        except Exception as e:
            logger.error(
                f"[{self.account_index}] Failed to estimate gas for approval: {str(e)}"
            )
            raise ValueError(
                f"Gas estimation failed for {token['name']} approval: {str(e)}"
            )

        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        signed_tx = self.web3.eth.account.sign_transaction(
            transaction, self.private_key
        )
        tx_hash = await self.web3.eth.send_raw_transaction(signed_tx.raw_transaction)

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        receipt = await self.web3.eth.wait_for_transaction_receipt(tx_hash)

        if receipt["status"] == 1:
            logger.success(
                f"[{self.account_index}] ‚úÖ [APPROVAL] {token['name']} approved. TX: {EXPLORER_URL}{tx_hash.hex()}"
            )
            return Web3.to_hex(tx_hash)
        else:
            logger.error(f"[{self.account_index}] Approval transaction failed.")
            return None

    async def swap(
        self,
        token_from: str,
        token_to: str,
        amount: float,
        slippage: float = 0.5,
    ) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤

        Args:
            token_from: –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'MON')
            token_to: –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'USDC')
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–∞ token_from –¥–ª—è –æ–±–º–µ–Ω–∞
            slippage: –î–æ–ø—É—Å—Ç–∏–º–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5%)

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–º–µ–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        for retry in range(self.config.SETTINGS.ATTEMPTS):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
                token_a = AVAILABLE_TOKENS.get(token_from)
                token_b = AVAILABLE_TOKENS.get(token_to)

                if not token_a or not token_b:
                    raise ValueError(
                        f"Invalid token symbols: {token_from} or {token_to}"
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
                balance = await self.get_token_balance(self.account.address, token_a)
                if balance < amount:
                    raise ValueError(
                        f"Insufficient balance. Have {balance} {token_a['name']}, need {amount}"
                    )

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount –≤ wei
                if token_a["native"]:
                    amount_in_wei = Web3.to_wei(amount, "ether")
                else:
                    amount_in_wei = int(amount * (10 ** token_a["decimals"]))

                # –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏: MON -> WMON –∏ WMON -> MON
                if token_a["native"] and token_b["name"] == "WMON":
                    return await self._deposit_mon_to_wmon(amount_in_wei)

                if token_a["name"] == "WMON" and token_b["native"]:
                    return await self._withdraw_wmon_to_mon(amount_in_wei)

                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–≤–∞–ø–æ–≤
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ–±–º–µ–Ω–∞
                path = [
                    WMON_CONTRACT if token_a["native"] else token_a["address"],
                    WMON_CONTRACT if token_b["native"] else token_b["address"],
                ]

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–æ—É—Ç–µ—Ä–∞
                router_contract = self.web3.eth.contract(
                    address=Web3.to_checksum_address(ROUTER_CONTRACT),
                    abi=ABI["router"],
                )

                # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                amounts_out = await router_contract.functions.getAmountsOut(
                    amount_in_wei, path
                ).call()
                expected_out = amounts_out[-1]

                # –ü—Ä–∏–º–µ–Ω—è–µ–º slippage
                min_amount_out = int(expected_out * (1 - slippage / 100))

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deadline (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á–∞—Å)
                deadline = int(time.time()) + 3600

                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Ç–∏–≤–Ω—ã–π, –¥–µ–ª–∞–µ–º approve
                if not token_a["native"]:
                    await self.approve_token(token_a, amount_in_wei)

                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞
                gas_params = await self.get_gas_params()

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
                if token_a["native"]:  # MON -> Token
                    tx_func = router_contract.functions.swapExactETHForTokens(
                        min_amount_out, path, self.account.address, deadline
                    )

                    transaction = {
                        "from": self.account.address,
                        "to": ROUTER_CONTRACT,
                        "value": amount_in_wei,
                        "data": tx_func._encode_transaction_data(),
                        "chainId": 10143,
                        "type": 2,
                        "nonce": await self.web3.eth.get_transaction_count(
                            self.account.address, "latest"
                        ),
                    }
                elif token_b["native"]:  # Token -> MON
                    tx_func = router_contract.functions.swapExactTokensForETH(
                        amount_in_wei,
                        min_amount_out,
                        path,
                        self.account.address,
                        deadline,
                    )

                    transaction = {
                        "from": self.account.address,
                        "to": ROUTER_CONTRACT,
                        "data": tx_func._encode_transaction_data(),
                        "chainId": 10143,
                        "type": 2,
                        "nonce": await self.web3.eth.get_transaction_count(
                            self.account.address, "latest"
                        ),
                    }
                else:  # Token -> Token
                    tx_func = router_contract.functions.swapExactTokensForTokens(
                        amount_in_wei,
                        min_amount_out,
                        path,
                        self.account.address,
                        deadline,
                    )

                    transaction = {
                        "from": self.account.address,
                        "to": ROUTER_CONTRACT,
                        "data": tx_func._encode_transaction_data(),
                        "chainId": 10143,
                        "type": 2,
                        "nonce": await self.web3.eth.get_transaction_count(
                            self.account.address, "latest"
                        ),
                    }

                # –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
                try:
                    estimated_gas = await self.estimate_gas(transaction)
                    transaction.update({"gas": estimated_gas, **gas_params})
                except Exception as e:
                    logger.error(
                        f"[{self.account_index}] Failed to estimate gas for swap: {str(e)}"
                    )
                    raise ValueError(f"Gas estimation failed for swap: {str(e)}")

                # –°—Ç—Ä–æ–∏–º, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                signed_tx = self.web3.eth.account.sign_transaction(
                    transaction, self.private_key
                )
                tx_hash = await self.web3.eth.send_raw_transaction(
                    signed_tx.raw_transaction
                )

                logger.info(
                    f"[{self.account_index}] üîÑ [SWAP] Executing swap [{token_a['name']} -> {token_b['name']}]..."
                )
                logger.info(
                    f"[{self.account_index}] üöÄ [TX SENT] Transaction hash: {EXPLORER_URL}{tx_hash.hex()}"
                )

                # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                receipt = await self.web3.eth.wait_for_transaction_receipt(tx_hash)
                block_number = receipt["blockNumber"]

                if receipt["status"] == 1:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    return {
                        "success": True,
                        "tx_hash": Web3.to_hex(tx_hash),
                        "block_number": block_number,
                        "from_token": token_a["name"],
                        "to_token": token_b["name"],
                        "amount_in": amount,
                        "expected_out": expected_out / (10 ** token_b["decimals"]),
                        "gas_used": receipt["gasUsed"],
                    }
                else:
                    logger.error(f"[{self.account_index}] Swap transaction failed.")
                    continue

            except Exception as e:
                random_pause = random.randint(
                    self.config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[0],
                    self.config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[1],
                )
                logger.error(
                    f"[{self.account_index}] Error in swap: {e}. "
                    f"Sleeping for {random_pause} seconds"
                )
                await asyncio.sleep(random_pause)

        return {"success": False, "error": "Max retry attempts reached"}

    async def _deposit_mon_to_wmon(self, amount_wei: int) -> Dict:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MON –≤ WMON —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é deposit

        Args:
            amount_wei: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MON –≤ wei –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        for retry in range(self.config.SETTINGS.ATTEMPTS):
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç WMON
                wmon_contract = self.web3.eth.contract(
                    address=Web3.to_checksum_address(WMON_CONTRACT),
                    abi=ABI["weth"],
                )

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é deposit
                deposit_func = wmon_contract.functions.deposit()

                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞
                gas_params = await self.get_gas_params()

                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transaction = {
                    "from": self.account.address,
                    "to": WMON_CONTRACT,
                    "value": amount_wei,
                    "data": deposit_func._encode_transaction_data(),
                    "chainId": 10143,
                    "type": 2,
                    "nonce": await self.web3.eth.get_transaction_count(
                        self.account.address, "latest"
                    ),
                }

                # –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
                try:
                    estimated_gas = await self.estimate_gas(transaction)
                    transaction.update({"gas": estimated_gas, **gas_params})
                except Exception as e:
                    logger.error(
                        f"[{self.account_index}] Failed to estimate gas for deposit: {str(e)}"
                    )
                    raise ValueError(f"Gas estimation failed for deposit: {str(e)}")

                logger.info(
                    f"[{self.account_index}] üí∞ [DEPOSIT] Converting MON to WMON via deposit..."
                )

                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                signed_tx = self.web3.eth.account.sign_transaction(
                    transaction, self.private_key
                )
                tx_hash = await self.web3.eth.send_raw_transaction(
                    signed_tx.raw_transaction
                )
                logger.info(
                    f"[{self.account_index}] üöÄ [TX SENT] Transaction hash: {EXPLORER_URL}{tx_hash.hex()}"
                )

                # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                receipt = await self.web3.eth.wait_for_transaction_receipt(tx_hash)
                block_number = receipt["blockNumber"]

                if receipt["status"] == 1:
                    return {
                        "success": True,
                        "tx_hash": Web3.to_hex(tx_hash),
                        "block_number": block_number,
                        "from_token": "MON",
                        "to_token": "WMON",
                        "amount_in": Web3.from_wei(amount_wei, "ether"),
                        "expected_out": Web3.from_wei(amount_wei, "ether"),
                        "gas_used": receipt["gasUsed"],
                    }
                else:
                    logger.error(f"[{self.account_index}] Deposit transaction failed.")
                    continue

            except Exception as e:
                random_pause = random.randint(
                    self.config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[0],
                    self.config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[1],
                )
                logger.error(
                    f"[{self.account_index}] Error in deposit_mon_to_wmon: {e}. "
                    f"Sleeping for {random_pause} seconds"
                )
                await asyncio.sleep(random_pause)

        return {"success": False, "error": "Max retry attempts reached"}

    async def _withdraw_wmon_to_mon(self, amount_wei: int) -> Dict:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å WMON –≤ MON —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é withdraw

        Args:
            amount_wei: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ WMON –≤ wei –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        for retry in range(self.config.SETTINGS.ATTEMPTS):
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç WMON
                wmon_contract = self.web3.eth.contract(
                    address=Web3.to_checksum_address(WMON_CONTRACT),
                    abi=ABI["weth"],
                )

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é withdraw
                withdraw_func = wmon_contract.functions.withdraw(amount_wei)

                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞
                gas_params = await self.get_gas_params()

                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transaction = {
                    "from": self.account.address,
                    "to": WMON_CONTRACT,
                    "data": withdraw_func._encode_transaction_data(),
                    "chainId": 10143,
                    "type": 2,
                    "nonce": await self.web3.eth.get_transaction_count(
                        self.account.address, "latest"
                    ),
                }

                # –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
                try:
                    estimated_gas = await self.estimate_gas(transaction)
                    transaction.update({"gas": estimated_gas, **gas_params})
                except Exception as e:
                    logger.error(
                        f"[{self.account_index}] Failed to estimate gas for withdraw: {str(e)}"
                    )
                    raise ValueError(f"Gas estimation failed for withdraw: {str(e)}")

                logger.info(
                    f"[{self.account_index}] üí∏ [WITHDRAW] Converting WMON to MON via withdraw..."
                )

                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                signed_tx = self.web3.eth.account.sign_transaction(
                    transaction, self.private_key
                )
                tx_hash = await self.web3.eth.send_raw_transaction(
                    signed_tx.raw_transaction
                )
                logger.info(
                    f"[{self.account_index}] üöÄ [TX SENT] Transaction hash: {EXPLORER_URL}{tx_hash.hex()}"
                )

                # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                receipt = await self.web3.eth.wait_for_transaction_receipt(tx_hash)
                block_number = receipt["blockNumber"]

                if receipt["status"] == 1:
                    return {
                        "success": True,
                        "tx_hash": Web3.to_hex(tx_hash),
                        "block_number": block_number,
                        "from_token": "WMON",
                        "to_token": "MON",
                        "amount_in": Web3.from_wei(amount_wei, "ether"),
                        "expected_out": Web3.from_wei(amount_wei, "ether"),
                        "gas_used": receipt["gasUsed"],
                    }
                else:
                    logger.error(f"[{self.account_index}] Withdraw transaction failed.")
                    continue

            except Exception as e:
                random_pause = random.randint(
                    self.config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[0],
                    self.config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[1],
                )
                logger.error(
                    f"[{self.account_index}] Error in withdraw_wmon_to_mon: {e}. "
                    f"Sleeping for {random_pause} seconds"
                )
                await asyncio.sleep(random_pause)

        return {"success": False, "error": "Max retry attempts reached"}

    async def pick_random_tokens(self) -> Tuple[str, str, float]:
        """
        –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–≤–∞–ø–∞ –∏ —Å—É–º–º—É

        Returns:
            Tuple[str, str, float]: (token_from, token_to, amount)
        """
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
        available_tokens = []

        for symbol, token_info in AVAILABLE_TOKENS.items():
            balance = await self.get_token_balance(self.account.address, token_info)
            if balance > 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–≤–∞–ø–∞
                available_tokens.append((symbol, balance))

        if not available_tokens:
            logger.warning(
                f"[{self.account_index}] No tokens with sufficient balance found"
            )
            return None, None, 0

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–≤–∞–ø–∞
        token_from, balance = random.choice(available_tokens)

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–µ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π)
        possible_tokens_to = [
            symbol for symbol in AVAILABLE_TOKENS.keys() if symbol != token_from
        ]
        token_to = random.choice(possible_tokens_to)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å–≤–∞–ø–∞ (30-70% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
        amount = balance * random.uniform(0.3, 0.7)

        logger.info(
            f"[{self.account_index}] Selected swap: {token_from} -> {token_to}, amount: {amount}"
        )

        return token_from, token_to, amount

    async def swap_all_to_monad(self):
        """
        –û–±–º–µ–Ω–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ MON (–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω).
        –ê–Ω–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–∏ liquidateWallet –∏–∑ JS-–∫–æ–¥–∞.
        """
        target_token = AVAILABLE_TOKENS["MON"]
        logger.info(f"[{self.account_index}] üîÑ Swapping all tokens to MON")

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        for symbol, token in AVAILABLE_TOKENS.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º MON, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ü–µ–ª–µ–≤–æ–π —Ç–æ–∫–µ–Ω
            if token["native"]:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
            balance = await self.get_token_balance(self.account.address, token)

            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if balance <= 0.01:
                logger.info(
                    f"[{self.account_index}] Skipping {symbol} - balance too low: {balance}"
                )
                continue

            # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ —Å–≤–∞–ø–∞
            mon_balance_before = await self.get_token_balance(
                self.account.address, target_token
            )
            logger.info(
                f"[{self.account_index}] Balance {symbol} before swap: {balance}"
            )
            logger.info(
                f"[{self.account_index}] Balance MON before swap: {mon_balance_before}"
            )

            try:
                # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π: WMON -> MON —á–µ—Ä–µ–∑ withdraw
                if symbol == "WMON":
                    amount_wei = int(balance * (10 ** token["decimals"]))
                    result = await self._withdraw_wmon_to_mon(amount_wei)
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–≤–∞–ø
                    result = await self.swap(symbol, "MON", balance)

                if result["success"]:
                    logger.success(
                        f"[{self.account_index}] Successfully swapped {balance} {symbol} to MON. "
                        f"TX: {EXPLORER_URL}{result['tx_hash']}"
                    )
                else:
                    logger.error(
                        f"[{self.account_index}] Failed to swap {symbol} to MON: {result.get('error', 'Unknown error')}"
                    )

            except Exception as e:
                logger.error(
                    f"[{self.account_index}] Error swapping {symbol} to MON: {str(e)}"
                )

            # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ —Å–≤–∞–ø–∞
            token_balance_after = await self.get_token_balance(
                self.account.address, token
            )
            mon_balance_after = await self.get_token_balance(
                self.account.address, target_token
            )
            logger.info(
                f"[{self.account_index}] Balance {symbol} after swap: {token_balance_after}"
            )
            logger.info(
                f"[{self.account_index}] Balance MON after swap: {mon_balance_after}"
            )

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–≤–∞–ø–∞–º–∏
            await asyncio.sleep(random.randint(2, 5))

        logger.success(f"[{self.account_index}] üéâ All tokens have been swapped to MON")
        return True

    async def execute(self):
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ OctoSwap –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–≤–∞–ø–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
        –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è SWAP_ALL_TO_MONAD, –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ MON.
        """
        logger.info(f"[{self.account_index}] Starting OctoSwap operations")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–º–µ–Ω—è—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ MON
        if (
            hasattr(self.config.OCTO_SWAP, "SWAP_ALL_TO_MONAD")
            and self.config.OCTO_SWAP.SWAP_ALL_TO_MONAD
        ):
            logger.info(
                f"[{self.account_index}] SWAP_ALL_TO_MONAD is enabled, swapping all tokens to MON"
            )
            await self.swap_all_to_monad()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–∞–ø–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (
            hasattr(self.config.FLOW, "NUMBER_OF_SWAPS")
            and isinstance(self.config.FLOW.NUMBER_OF_SWAPS, list)
            and len(self.config.FLOW.NUMBER_OF_SWAPS) == 2
        ):
            min_swaps, max_swaps = self.config.FLOW.NUMBER_OF_SWAPS
            num_swaps = random.randint(min_swaps, max_swaps)
        else:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Å–≤–∞–ø
            num_swaps = 1

        logger.info(f"[{self.account_index}] Will perform {num_swaps} swaps")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–∞–ø–æ–≤
        for swap_num in range(1, num_swaps + 1):
            logger.info(f"[{self.account_index}] Executing swap {swap_num}/{num_swaps}")

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–≤–∞–ø–∞
            token_from, token_to, _ = await self.pick_random_tokens()

            if not token_from or not token_to:
                logger.warning(
                    f"[{self.account_index}] No suitable tokens found for swap {swap_num}. Skipping."
                )
                continue

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            token_info = AVAILABLE_TOKENS.get(token_from)
            balance = await self.get_token_balance(self.account.address, token_info)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–≤–∞–ø–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            random_percent = random.randint(
                self.config.FLOW.PERCENT_OF_BALANCE_TO_SWAP[0],
                self.config.FLOW.PERCENT_OF_BALANCE_TO_SWAP[1],
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è —Å–≤–∞–ø–∞
            amount = balance * (random_percent / 100)

            logger.info(
                f"[{self.account_index}] Swap {swap_num}: {token_from} -> {token_to}, "
                f"amount: {amount} ({random_percent:.2f}% of balance)"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è —Å–≤–∞–ø–∞
            if amount <= 0.01:
                logger.warning(
                    f"[{self.account_index}] Amount too small for swap {swap_num}. Skipping."
                )
                continue

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–∞–ø
            swap_result = await self.swap(token_from, token_to, amount)

            if swap_result["success"]:
                logger.success(
                    f"[{self.account_index}] Swap {swap_num} completed successfully: "
                    f"{swap_result['amount_in']} {swap_result['from_token']} -> "
                    f"{swap_result['expected_out']} {swap_result['to_token']}"
                )

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≤–∞–ø, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º
                if swap_num < num_swaps:
                    pause_time = random.randint(
                        self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[0],
                        self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[1],
                    )
                    logger.info(
                        f"[{self.account_index}] Pausing for {pause_time} seconds before next swap"
                    )
                    await asyncio.sleep(pause_time)
            else:
                logger.error(
                    f"[{self.account_index}] Swap {swap_num} failed: {swap_result.get('error', 'Unknown error')}"
                )

                # –ï—Å–ª–∏ —Å–≤–∞–ø –Ω–µ —É–¥–∞–ª—Å—è, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if swap_num < num_swaps:
                    pause_time = random.randint(
                        self.config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[0],
                        self.config.SETTINGS.PAUSE_BETWEEN_ATTEMPTS[1],
                    )
                    logger.info(
                        f"[{self.account_index}] Pausing for {pause_time} seconds before next swap attempt"
                    )
                    await asyncio.sleep(pause_time)

        logger.success(
            f"[{self.account_index}] Completed all {num_swaps} OctoSwap operations"
        )
