import asyncio
import random
from eth_account import Account
from primp import AsyncClient
from web3 import AsyncWeb3, Web3
from web3.contract import Contract

from src.utils.constants import EXPLORER_URL, RPC_URL
from src.utils.config import Config
from loguru import logger


class ZkCodex:
    def __init__(
        self,
        account_index: int,
        proxy: str,
        private_key: str,
        config: Config,
        session: AsyncClient,
    ):
        self.account_index = account_index
        self.proxy = proxy
        self.private_key = private_key
        self.config = config
        self.session = session

        self.account: Account = Account.from_key(private_key=private_key)
        self.web3 = AsyncWeb3(
            AsyncWeb3.AsyncHTTPProvider(
                RPC_URL,
                request_kwargs={"proxy": (f"http://{proxy}") if proxy else None, "ssl": False},
            )
        )

    async def get_nft_balance(self) -> int:
        """
        Проверяет баланс NFT для текущего аккаунта
        Returns:
            int: количество NFT
        """
        try:
            balance = await self.nft_contract.functions.balanceOf(
                self.account.address
            ).call()

            return balance
        except Exception as e:
            logger.error(f"[{self.account_index}] Error checking NFT balance: {e}")
            return 0

    async def deploy_default_contract(self):
        for retry in range(self.config.SETTINGS.ATTEMPTS):
            try:
                logger.info(f"[{self.account_index}] Deploying default contract")

                # Contract bytecode (the input data from the example transaction)
                bytecode = "0x608060405260405161022738038061022783398101604081905261002291610134565b6521a6bbdb500034101561007d5760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74206665652073656e74000000000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117825560405134908381818185875af1925050503d80600081146100d7576040519150601f19603f3d011682016040523d82523d6000602084013e6100dc565b606091505b505090508061012d5760405162461bcd60e51b815260206004820152601360248201527f466565207472616e73666572206661696c6564000000000000000000000000006044820152606401610074565b5050610164565b60006020828403121561014657600080fd5b81516001600160a01b038116811461015d57600080fd5b9392505050565b60b5806101726000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063ad5f1574146037578063b3f00674146056575b600080fd5b60436521a6bbdb500081565b6040519081526020015b60405180910390f35b6000546068906001600160a01b031681565b6040516001600160a01b039091168152602001604d56fea264697066735822122064cc25b24707cce06d092aa8f641c2f6b71e3b17c5599c76d3bd267b5d6dd2db64736f6c6343000813003300000000000000000000000038cb0184b802629c8a93235cc6c058f5a6cc8f84"

                # Value in MON (0.000037 MON as seen in the example transaction)
                value_in_wei = self.web3.to_wei(0.000037, "ether")

                # Create transaction for gas estimation
                transaction = {
                    "from": self.account.address,
                    "to": None,  # Contract creation has no 'to' address
                    "value": value_in_wei,
                    "data": bytecode,
                    "nonce": await self.web3.eth.get_transaction_count(
                        self.account.address
                    ),
                    "maxFeePerGas": await self.web3.eth.gas_price,
                    "maxPriorityFeePerGas": await self.web3.eth.gas_price,
                    "chainId": 10143,
                }

                # Estimate gas
                try:
                    estimated_gas = await self.web3.eth.estimate_gas(transaction)
                    # Add 10% buffer for safety
                    gas_limit = int(estimated_gas * 1.1)
                except Exception as gas_error:
                    logger.error(
                        f"[{self.account_index}] Gas estimation error: {gas_error}"
                    )
                    raise gas_error

                # Add gas limit to transaction
                transaction["gas"] = gas_limit

                # Sign transaction
                signed_txn = self.web3.eth.account.sign_transaction(
                    transaction, self.private_key
                )

                # Send transaction
                tx_hash = await self.web3.eth.send_raw_transaction(
                    signed_txn.raw_transaction
                )

                # Wait for confirmation
                receipt = await self.web3.eth.wait_for_transaction_receipt(tx_hash)

                if receipt["status"] == 1:
                    contract_address = receipt.contractAddress
                    logger.success(
                        f"[{self.account_index}] Successfully deployed contract at {contract_address}. TX: {EXPLORER_URL}{tx_hash.hex()}"
                    )
                    return True, contract_address
                else:
                    logger.error(
                        f"[{self.account_index}] Contract deployment failed. TX: {EXPLORER_URL}{tx_hash.hex()}"
                    )
                    return False, None

            except Exception as e:
                random_pause = random.randint(
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[0],
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[1],
                )
                logger.error(
                    f"[{self.account_index}] Error deploying contract: {e}. Pause {random_pause} seconds"
                )
                await asyncio.sleep(random_pause)

        return False, None

    async def deploy_token(
        self,
        token_name="zkCodex Token Deployer",
        token_symbol="ZKCODEX",
        total_supply=1000000,
    ):
        for retry in range(self.config.SETTINGS.ATTEMPTS):
            try:
                logger.info(
                    f"[{self.account_index}] Deploying token contract: {token_name} ({token_symbol})"
                )

                # Token contract bytecode
                bytecode = "0x60806040819052600780546001600160a01b0319167338cb0184b802629c8a93235cc6c058f5a6cc8f8417905561119338819003908190833981016040819052610048916104ae565b338383600361005783826105a9565b50600461006482826105a9565b5050506001600160a01b03811661009657604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61009f81610235565b5060016006556521a6bbdb50003410156101075760405162461bcd60e51b815260206004820152602360248201527f4372656174696f6e206665652072657175697265643a20302e3030303033372060448201526208aa8960eb1b606482015260840161008d565b600081116101445760405162461bcd60e51b815260206004820152600a6024820152690537570706c79203d20360b41b604482015260640161008d565b6007546040516000916001600160a01b03169034908381818185875af1925050503d8060008114610191576040519150601f19603f3d011682016040523d82523d6000602084013e610196565b606091505b50509050806101e75760405162461bcd60e51b815260206004820152601360248201527f466565207472616e73666572206661696c656400000000000000000000000000604482015260640161008d565b6101f13383610287565b7f35d0b9713cc4b54bb91a9bfa420b091d37c592d49a7468dafe20b4cfbdfca02a84848460405161022493929190610693565b60405180910390a1505050506106f0565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166102b15760405163ec442f0560e01b81526000600482015260240161008d565b6102bd600083836102c1565b5050565b6001600160a01b0383166102ec5780600260008282546102e191906106c9565b9091555061035e9050565b6001600160a01b0383166000908152602081905260409020548181101561033f5760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161008d565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661037a57600280548290039055610399565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516103de91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561041c578181015183820152602001610404565b50506000910152565b600082601f83011261043657600080fd5b81516001600160401b0381111561044f5761044f6103eb565b604051601f8201601f19908116603f011681016001600160401b038111828210171561047d5761047d6103eb565b60405281815283820160200185101561049557600080fd5b6104a6826020830160208701610401565b949350505050565b6000806000606084860312156104c357600080fd5b83516001600160401b038111156104d957600080fd5b6104e586828701610425565b602086015190945090506001600160401b0381111561050357600080fd5b61050f86828701610425565b925050604084015190509250925092565b600181811c9082168061053457607f821691505b60208210810361055457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156105a457806000526020600020601f840160051c810160208510156105815750805b601f840160051c820191505b818110156105a1576000815560010161058d565b50505b505050565b81516001600160401b038111156105c2576105c26103eb565b6105d6816105d08454610520565b8461055a565b6020601f82116001811461060a57600083156105f25750848201515b600019600385901b1c1916600184901b1784556105a1565b600084815260208120601f198516915b8281101561063a578785015182556020948501946001909201910161061a565b50848210156106585786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6000815180845261067f816020860160208601610401565b601f01601f19169290920160200192915050565b6060815260006106a66060830186610667565b82810360208401526106b88186610667565b915050826040830152949350505050565b808201808211156106ea57634e487b7160e01b600052601160045260246000fd5b92915050565b610a94806106ff6000396000f3fe6080604052600436106100e15760003560e01c80638831e9cf1161007f578063a9059cbb11610059578063a9059cbb146102f3578063dd62ed3e14610313578063f2fde38b14610359578063fa2af9da1461037957600080fd5b80638831e9cf1461028c5780638da5cb5b146102ac57806395d89b41146102de57600080fd5b806323b872dd116100bb57806323b872dd14610205578063313ce5671461022557806370a0823114610241578063715018a61461027757600080fd5b806306fdde031461018b578063095ea7b3146101b657806318160ddd146101e657600080fd5b36610186576007546040516000916001600160a01b03169034908381818185875af1925050503d8060008114610133576040519150601f19603f3d011682016040523d82523d6000602084013e610138565b606091505b50509050806101845760405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b60448201526064015b60405180910390fd5b005b600080fd5b34801561019757600080fd5b506101a0610399565b6040516101ad91906108dd565b60405180910390f35b3480156101c257600080fd5b506101d66101d1366004610947565b61042b565b60405190151581526020016101ad565b3480156101f257600080fd5b506002545b6040519081526020016101ad565b34801561021157600080fd5b506101d6610220366004610971565b610445565b34801561023157600080fd5b50604051601281526020016101ad565b34801561024d57600080fd5b506101f761025c3660046109ae565b6001600160a01b031660009081526020819052604090205490565b34801561028357600080fd5b50610184610469565b34801561029857600080fd5b506101846102a73660046109ae565b61047d565b3480156102b857600080fd5b506005546001600160a01b03165b6040516001600160a01b0390911681526020016101ad565b3480156102ea57600080fd5b506101a0610514565b3480156102ff57600080fd5b506101d661030e366004610947565b610523565b34801561031f57600080fd5b506101f761032e3660046109d0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561036557600080fd5b506101846103743660046109ae565b610531565b34801561038557600080fd5b506007546102c6906001600160a01b031681565b6060600380546103a890610a03565b80601f01602080910402602001604051908101604052809291908181526020018280546103d490610a03565b80156104215780601f106103f657610100808354040283529160200191610421565b820191906000526020600020905b81548152906001019060200180831161040457829003601f168201915b5050505050905090565b60003361043981858561056f565b60019150505b92915050565b600033610453858285610581565b61045e858585610600565b506001949350505050565b61047161065f565b61047b600061068c565b565b61048561065f565b6001600160a01b0381166104ca5760405162461bcd60e51b815260206004820152600c60248201526b5a65726f206164647265737360a01b604482015260640161017b565b600780546001600160a01b0319166001600160a01b0383169081179091556040517f73238e3ae0a71b401b31ae67204506d074de41bd5c084082fba9b64b1c7fa28f90600090a250565b6060600480546103a890610a03565b600033610439818585610600565b61053961065f565b6001600160a01b03811661056357604051631e4fbdf760e01b81526000600482015260240161017b565b61056c8161068c565b50565b61057c83838360016106de565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198110156105fa57818110156105eb57604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161017b565b6105fa848484840360006106de565b50505050565b6001600160a01b03831661062a57604051634b637e8f60e11b81526000600482015260240161017b565b6001600160a01b0382166106545760405163ec442f0560e01b81526000600482015260240161017b565b61057c8383836107b3565b6005546001600160a01b0316331461047b5760405163118cdaa760e01b815233600482015260240161017b565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166107085760405163e602df0560e01b81526000600482015260240161017b565b6001600160a01b03831661073257604051634a1406b160e11b81526000600482015260240161017b565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156105fa57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107a591815260200190565b60405180910390a350505050565b6001600160a01b0383166107de5780600260008282546107d39190610a3d565b909155506108509050565b6001600160a01b038316600090815260208190526040902054818110156108315760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161017b565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661086c5760028054829003905561088b565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108d091815260200190565b60405180910390a3505050565b602081526000825180602084015260005b8181101561090b57602081860181015160408684010152016108ee565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461094257600080fd5b919050565b6000806040838503121561095a57600080fd5b6109638361092b565b946020939093013593505050565b60008060006060848603121561098657600080fd5b61098f8461092b565b925061099d6020850161092b565b929592945050506040919091013590565b6000602082840312156109c057600080fd5b6109c98261092b565b9392505050565b600080604083850312156109e357600080fd5b6109ec8361092b565b91506109fa6020840161092b565b90509250929050565b600181811c90821680610a1757607f821691505b602082108103610a3757634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561043f57634e487b7160e01b600052601160045260246000fdfea264697066735822122022a75f40070b6dc7dbe5fa6faf63e32f1ba0e9d418e1bc65bb94efd49920287964736f6c634300081a0033000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000000000000000000000167a6b436f64657820546f6b656e204465706c6f7965720000000000000000000000000000000000000000000000000000000000000000000000000000000000075a4b434f44455800000000000000000000000000000000000000000000000000"

                # Value in MON (0.000037 MON as seen in the example transaction)
                value_in_wei = self.web3.to_wei(0.000037, "ether")

                # Create transaction for gas estimation
                transaction = {
                    "from": self.account.address,
                    "to": None,  # Contract creation has no 'to' address
                    "value": value_in_wei,
                    "data": bytecode,
                    "nonce": await self.web3.eth.get_transaction_count(
                        self.account.address
                    ),
                    "maxFeePerGas": await self.web3.eth.gas_price,
                    "maxPriorityFeePerGas": await self.web3.eth.gas_price,
                    "chainId": 10143,
                }

                # Estimate gas
                try:
                    estimated_gas = await self.web3.eth.estimate_gas(transaction)
                    # Add 10% buffer for safety
                    gas_limit = int(estimated_gas * 1.1)
                except Exception as gas_error:
                    logger.error(
                        f"[{self.account_index}] Gas estimation error: {gas_error}"
                    )
                    raise gas_error

                # Add gas limit to transaction
                transaction["gas"] = gas_limit

                # Sign transaction
                signed_txn = self.web3.eth.account.sign_transaction(
                    transaction, self.private_key
                )

                # Send transaction
                tx_hash = await self.web3.eth.send_raw_transaction(
                    signed_txn.raw_transaction
                )

                # Wait for confirmation
                receipt = await self.web3.eth.wait_for_transaction_receipt(tx_hash)

                if receipt["status"] == 1:
                    contract_address = receipt.contractAddress
                    logger.success(
                        f"[{self.account_index}] Successfully deployed token contract {contract_address}. TX: {EXPLORER_URL}{tx_hash.hex()}"
                    )
                    return True, contract_address
                else:
                    logger.error(
                        f"[{self.account_index}] Token contract deployment failed. TX: {EXPLORER_URL}{tx_hash.hex()}"
                    )
                    return False, None

            except Exception as e:
                random_pause = random.randint(
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[0],
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[1],
                )
                logger.error(
                    f"[{self.account_index}] Error deploying token contract: {e}. Pause {random_pause} seconds"
                )
                await asyncio.sleep(random_pause)

        return False, None

    async def deploy_nft(self):
        for retry in range(self.config.SETTINGS.ATTEMPTS):
            try:
                logger.info(
                    f"[{self.account_index}] Deploying NFT contract"
                )

                # Token contract bytecode
                bytecode = "0x60a060405260405161187b38038061187b833981016040819052610022916105e7565b8282600061003083826106e1565b50600161003d82826106e1565b5050506521a6bbdb500034101561009b5760405162461bcd60e51b815260206004820152601560248201527f496e73756666696369656e74206665652073656e74000000000000000000000060448201526064015b60405180910390fd5b7338cb0184b802629c8a93235cc6c058f5a6cc8f8460805260005b818110156100d0576100c8338261017f565b6001016100b6565b5060006080516001600160a01b03163460405160006040518083038185875af1925050503d8060008114610120576040519150601f19603f3d011682016040523d82523d6000602084013e610125565b606091505b50509050806101765760405162461bcd60e51b815260206004820152601360248201527f466565207472616e73666572206661696c6564000000000000000000000000006044820152606401610092565b5050505061079f565b6001600160a01b0382166101a957604051633250574960e11b815260006004820152602401610092565b60006101b68383836101e8565b90506001600160a01b038116156101e3576040516339e3563760e11b815260006004820152602401610092565b505050565b6000828152600260205260408120546001600160a01b0390811690831615610215576102158184866102e0565b6001600160a01b03811615610252576102316000858180610344565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615610281576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6102eb838383610469565b6101e3576001600160a01b03831661031957604051637e27328960e01b815260048101829052602401610092565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610092565b808061035857506001600160a01b03821615155b15610439576000610368846104ef565b90506001600160a01b038316158015906103945750826001600160a01b0316816001600160a01b031614155b80156103c657506001600160a01b0380821660009081526005602090815260408083209387168352929052205460ff16155b156103ef5760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610092565b81156104375783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b038316158015906104e75750826001600160a01b0316846001600160a01b031614806104c357506001600160a01b0380851660009081526005602090815260408083209387168352929052205460ff165b806104e757506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6000818152600260205260408120546001600160a01b03168061052857604051637e27328960e01b815260048101849052602401610092565b92915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261055557600080fd5b81516001600160401b0381111561056e5761056e61052e565b604051601f8201601f19908116603f011681016001600160401b038111828210171561059c5761059c61052e565b6040528181528382016020018510156105b457600080fd5b60005b828110156105d3576020818601810151838301820152016105b7565b506000918101602001919091529392505050565b6000806000606084860312156105fc57600080fd5b83516001600160401b0381111561061257600080fd5b61061e86828701610544565b602086015190945090506001600160401b0381111561063c57600080fd5b61064886828701610544565b925050604084015190509250925092565b600181811c9082168061066d57607f821691505b60208210810361068d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101e357806000526020600020601f840160051c810160208510156106ba5750805b601f840160051c820191505b818110156106da57600081556001016106c6565b5050505050565b81516001600160401b038111156106fa576106fa61052e565b61070e816107088454610659565b84610693565b6020601f821160018114610742576000831561072a5750848201515b600019600385901b1c1916600184901b1784556106da565b600084815260208120601f198516915b828110156107725787850151825560209485019460019092019101610752565b50848210156107905786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6080516110bb6107c06000396000818160f5015261035401526110bb6000f3fe6080604052600436106100ec5760003560e01c806370a082311161008a578063b3f0067411610059578063b3f0067414610342578063b88d4fde14610376578063c87b56dd14610396578063e985e9c5146103b657600080fd5b806370a08231146102c557806395d89b41146102f3578063a22cb46514610308578063ad5f15741461032857600080fd5b8063095ea7b3116100c6578063095ea7b31461024557806323b872dd1461026557806342842e0e146102855780636352211e146102a557600080fd5b806301ffc9a7146101b657806306fdde03146101eb578063081812fc1461020d57600080fd5b366101b15760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163460405160006040518083038185875af1925050503d806000811461015e576040519150601f19603f3d011682016040523d82523d6000602084013e610163565b606091505b50509050806101af5760405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b60448201526064015b60405180910390fd5b005b600080fd5b3480156101c257600080fd5b506101d66101d1366004610d22565b6103d6565b60405190151581526020015b60405180910390f35b3480156101f757600080fd5b50610200610428565b6040516101e29190610d8f565b34801561021957600080fd5b5061022d610228366004610da2565b6104ba565b6040516001600160a01b0390911681526020016101e2565b34801561025157600080fd5b506101af610260366004610dd7565b6104e3565b34801561027157600080fd5b506101af610280366004610e01565b6104f2565b34801561029157600080fd5b506101af6102a0366004610e01565b61057d565b3480156102b157600080fd5b5061022d6102c0366004610da2565b61059d565b3480156102d157600080fd5b506102e56102e0366004610e3e565b6105a8565b6040519081526020016101e2565b3480156102ff57600080fd5b506102006105f0565b34801561031457600080fd5b506101af610323366004610e59565b6105ff565b34801561033457600080fd5b506102e56521a6bbdb500081565b34801561034e57600080fd5b5061022d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561038257600080fd5b506101af610391366004610eab565b61060a565b3480156103a257600080fd5b506102006103b1366004610da2565b610622565b3480156103c257600080fd5b506101d66103d1366004610f8f565b610697565b60006001600160e01b031982166380ac58cd60e01b148061040757506001600160e01b03198216635b5e139f60e01b145b8061042257506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461043790610fc2565b80601f016020809104026020016040519081016040528092919081815260200182805461046390610fc2565b80156104b05780601f10610485576101008083540402835291602001916104b0565b820191906000526020600020905b81548152906001019060200180831161049357829003601f168201915b5050505050905090565b60006104c5826106c5565b506000828152600460205260409020546001600160a01b0316610422565b6104ee8282336106fe565b5050565b6001600160a01b03821661051c57604051633250574960e11b8152600060048201526024016101a6565b600061052983833361070b565b9050836001600160a01b0316816001600160a01b031614610577576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016101a6565b50505050565b6105988383836040518060200160405280600081525061060a565b505050565b6000610422826106c5565b60006001600160a01b0382166105d4576040516322718ad960e21b8152600060048201526024016101a6565b506001600160a01b031660009081526003602052604090205490565b60606001805461043790610fc2565b6104ee338383610804565b6106158484846104f2565b61057733858585856108a3565b606061062d826106c5565b50600061064560408051602081019091526000815290565b905060008151116106655760405180602001604052806000815250610690565b8061066f846109ce565b604051602001610680929190610ffc565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260408120546001600160a01b03168061042257604051637e27328960e01b8152600481018490526024016101a6565b6105988383836001610a61565b6000828152600260205260408120546001600160a01b039081169083161561073857610738818486610b67565b6001600160a01b0381161561077657610755600085600080610a61565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b038516156107a5576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6001600160a01b03821661083657604051630b61174360e31b81526001600160a01b03831660048201526024016101a6565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156109c757604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906108e590889088908790879060040161102b565b6020604051808303816000875af1925050508015610920575060408051601f3d908101601f1916820190925261091d91810190611068565b60015b610989573d80801561094e576040519150601f19603f3d011682016040523d82523d6000602084013e610953565b606091505b50805160000361098157604051633250574960e11b81526001600160a01b03851660048201526024016101a6565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146109c557604051633250574960e11b81526001600160a01b03851660048201526024016101a6565b505b5050505050565b606060006109db83610bcb565b600101905060008167ffffffffffffffff8111156109fb576109fb610e95565b6040519080825280601f01601f191660200182016040528015610a25576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610a2f57509392505050565b8080610a7557506001600160a01b03821615155b15610b37576000610a85846106c5565b90506001600160a01b03831615801590610ab15750826001600160a01b0316816001600160a01b031614155b8015610ac45750610ac28184610697565b155b15610aed5760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016101a6565b8115610b355783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610b72838383610ca3565b610598576001600160a01b038316610ba057604051637e27328960e01b8152600481018290526024016101a6565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016101a6565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610c0a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610c36576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610c5457662386f26fc10000830492506010015b6305f5e1008310610c6c576305f5e100830492506008015b6127108310610c8057612710830492506004015b60648310610c92576064830492506002015b600a83106104225760010192915050565b60006001600160a01b03831615801590610d015750826001600160a01b0316846001600160a01b03161480610cdd5750610cdd8484610697565b80610d0157506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160e01b031981168114610d1f57600080fd5b50565b600060208284031215610d3457600080fd5b813561069081610d09565b60005b83811015610d5a578181015183820152602001610d42565b50506000910152565b60008151808452610d7b816020860160208601610d3f565b601f01601f19169290920160200192915050565b6020815260006106906020830184610d63565b600060208284031215610db457600080fd5b5035919050565b80356001600160a01b0381168114610dd257600080fd5b919050565b60008060408385031215610dea57600080fd5b610df383610dbb565b946020939093013593505050565b600080600060608486031215610e1657600080fd5b610e1f84610dbb565b9250610e2d60208501610dbb565b929592945050506040919091013590565b600060208284031215610e5057600080fd5b61069082610dbb565b60008060408385031215610e6c57600080fd5b610e7583610dbb565b915060208301358015158114610e8a57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610ec157600080fd5b610eca85610dbb565b9350610ed860208601610dbb565b925060408501359150606085013567ffffffffffffffff811115610efb57600080fd5b8501601f81018713610f0c57600080fd5b803567ffffffffffffffff811115610f2657610f26610e95565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610f5557610f55610e95565b604052818152828201602001891015610f6d57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215610fa257600080fd5b610fab83610dbb565b9150610fb960208401610dbb565b90509250929050565b600181811c90821680610fd657607f821691505b602082108103610ff657634e487b7160e01b600052602260045260246000fd5b50919050565b6000835161100e818460208801610d3f565b835190830190611022818360208801610d3f565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061105e90830184610d63565b9695505050505050565b60006020828403121561107a57600080fd5b815161069081610d0956fea2646970667358221220c4ce9f37fda618a40766b5196c3d0c1884deee95df34c8e5d77195e120018f0c64736f6c634300081a0033000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000147a6b436f646578204e4654204465706c6f79657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000075a4b434f44455800000000000000000000000000000000000000000000000000"

                # Value in MON (0.000037 MON as seen in the example transaction)
                value_in_wei = self.web3.to_wei(0.000037, "ether")

                # Create transaction for gas estimation
                transaction = {
                    "from": self.account.address,
                    "to": None,  # Contract creation has no 'to' address
                    "value": value_in_wei,
                    "data": bytecode,
                    "nonce": await self.web3.eth.get_transaction_count(
                        self.account.address
                    ),
                    "maxFeePerGas": await self.web3.eth.gas_price,
                    "maxPriorityFeePerGas": await self.web3.eth.gas_price,
                    "chainId": 10143,
                }

                # Estimate gas
                try:
                    estimated_gas = await self.web3.eth.estimate_gas(transaction)
                    # Add 10% buffer for safety
                    gas_limit = int(estimated_gas * 1.1)
                except Exception as gas_error:
                    logger.error(
                        f"[{self.account_index}] Gas estimation error: {gas_error}"
                    )
                    raise gas_error

                # Add gas limit to transaction
                transaction["gas"] = gas_limit

                # Sign transaction
                signed_txn = self.web3.eth.account.sign_transaction(
                    transaction, self.private_key
                )

                # Send transaction
                tx_hash = await self.web3.eth.send_raw_transaction(
                    signed_txn.raw_transaction
                )

                # Wait for confirmation
                receipt = await self.web3.eth.wait_for_transaction_receipt(tx_hash)

                if receipt["status"] == 1:
                    contract_address = receipt.contractAddress
                    logger.success(
                        f"[{self.account_index}] Successfully deployed NFT contract {contract_address}. TX: {EXPLORER_URL}{tx_hash.hex()}"
                    )
                    return True, contract_address
                else:
                    logger.error(
                        f"[{self.account_index}] NFT contract deployment failed. TX: {EXPLORER_URL}{tx_hash.hex()}"
                    )
                    return False, None

            except Exception as e:
                random_pause = random.randint(
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[0],
                    self.config.SETTINGS.RANDOM_PAUSE_BETWEEN_ACTIONS[1],
                )
                logger.error(
                    f"[{self.account_index}] Error deploying token contract: {e}. Pause {random_pause} seconds"
                )
                await asyncio.sleep(random_pause)

        return False, None

    async def deploy(self):
        try:
            # Collect all enabled actions
            enabled_actions = []
            
            if self.config.ZKCODEX.DEPLOY_TOKEN:
                enabled_actions.append(self.deploy_token)
                
            if self.config.ZKCODEX.DEPLOY_NFT:
                enabled_actions.append(self.deploy_nft)
                
            if self.config.ZKCODEX.DEPLOY_CONTRACT:
                enabled_actions.append(self.deploy_default_contract)
            
            # If no actions are enabled, return
            if not enabled_actions:
                logger.info(f"[{self.account_index}] No actions enabled in config for ZkCodex")
                return False
            
            # Shuffle to randomize order
            random.shuffle(enabled_actions)
            
            # Execute actions based on config
            if self.config.ZKCODEX.ONE_ACTION_PER_LAUNCH:
                # Run just one random action
                action = random.choice(enabled_actions)
                logger.info(f"[{self.account_index}] Running one random action: {action.__name__}")
                result = await action()
                return result
            else:
                # Run all enabled actions in random order
                logger.info(f"[{self.account_index}] Running all enabled actions in random order")
                success = True
                for action in enabled_actions:
                    logger.info(f"[{self.account_index}] Running action: {action.__name__}")
                    result = await action()
                    if not result:
                        success = False
                return success
                
        except Exception as err:
            logger.error(f"[{self.account_index}] ZkCodex deploy failed: {err}")
            return False